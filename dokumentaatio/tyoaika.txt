- 11.11 16-22		Tutustuminen projektivaatimuksiin
yht: 6h
kum: 6h

- 12.11 10-12		Tutustuminen projektivaatimuksiin
	12-14		Tutustuminen Tkinteriin
	14-15		Tutustuminen Git for Windowsiin ja Windows Terminaliin
	15-16		Tutustuminen Tkinteriin jatkuu
	20-00		Ohjelman toiminnan ja rakenteen hahmottelu/kartoitus
	00-03:45 	Määrittelydokumentin laatiminen
yht: 13h 45min
kum: 19h 45min

- 13.11 12-15           Unittest ohjeeseen tutustuminen
	15-17           Invoke ohjeeseen tutustumisen aloittaminen
	19-22		Invoke ohjeeseen tutustumisen jatkaminen
	00-03           invoke unittest ja git harjoittelu
yht: 11h
kum: 30h 45min

- 14.11 12-14		Invoke ja coverage ohjeisiin tutustuminen
	14-16		Invoke, unittest, coverage ja git harjoittelu
yht: 4h
kum: 34h 45min

- 18.11 14:30-18	tehtävän koodaamisen aloittaminen, ensin hahmoitellaan perusrakennetta ja ideaa (Luukkaisen kanssa zoomissa)
	21-00		sqlite3:n käytön muistelu ja tavailu
	00-03		tietokannan päädyn luokkien rakenteen muodostaminen ja koodaamisen aloitus
yht: 9h 30min
kum: 44h 15min

- 19.11 11-15:30	User ja user_dbao koodaus --> töihin
yht: 4h 30min
kum: 45h 45min

- 20.11 14-16		user_dbao koodaus --> töihin
yht: 2h
kum: 50h 45min

- 21.11 16-17:30	user_dbao koodaus --> töihin
	18:30-21:30	user_dbao koodaus töissä
	23-04		user_dbao koodaus ja testit user_dbao:lle koodaus 100% coverage
yht: 9h 30min
kum: 60h 15min

- 22.11 17-05		user_repository luokan, user_repository_test testien, utils/ kansion Helper luokan apufunktioiden, helper_test apufunktioiden testien koodaus, testit 100% coverage
yht: 12h
kum: 72h 15min

- 23.11 10-23:30	Pelkkää user_service luokan ja tekstikäyttöliittymän koodausta. Näissä ei testejä.
yht: 13h 30min
kum: 85h 75min

- 25.11 23-05		Pylintiin tutustuminen, ja koko koodikannan sillä korjaaminen mahd lähelle 10/10. Taisi olla jotain 9,80 luokkaa
yht: 6h
kum: 91h 45min

- 26.11	05-07:30	Testien päivitystä. Pylintin mukaan jouduin tekemään muutoksia niin että testit piti päivittää. Lisäksi loin uuden tiedoston user_service_test.py, jossa kirjoitin uudet testit user_service moduulille.
yht: 3h 30min
kum: 95h 15min

- 29.11 21-02		Tutustu Tkinteriin lisää ja yritä saada Tkinter toimimaan sekä 
windowsilla, wsl:ssä ja debianilla
	02-06		Aloita graafisen käyttöliittymän teko
yht: 9h
kum: 104h 15min

- 30.11	14-00		Tkinterin kanssa sählääminen. Yritä saada sivurakenne toimimaan fiksusti. Joutuu Tkinterin oliorakenteiden opiskelun lisäksi palaamaan takaisin Pythonin perinnän rakenteiden kertaamiseen. Ihan ei ehdi deadlineen nyt nämä. Sen verran iso pala purtavaksi.
yht: 10h
kum: 114h 15min

- 1.12	00-05		Tkinter jatkuu. Keksin kivan tavan luoda GUI rakenteen. Rakensin kirjautumis ja rekisteröitymissivut ja liitin ne sovelluslogiikkaan. Korjasin myös sovelluslogiikan toimintaa ja siihen liittyviä testejä
yht: 5h
kum: 119h 15min

- 2.12	20-05		Ohjelmalogiikan jatkaminen. Klikkien toiminnan ja tietokannan rakenteen suunnittelu ja tietokantaobjektin clique_dbao ja sen testitiedoston clique_dbao_test koodaamisen aloitus ja sql:n kertaus.
yht: 9h
kum: 128h 15min

- 6.12	14-17		Tietokantaobjektin clique_dbao ja sen testitiedoston clique_dbao_test koodaamisen jatkaminen.
	21-00		Tietokantaobjektin clique_dbao ja sen testitiedoston clique_dbao_test jatkaminen ja sama
yht: 6h
kum: 134h 15min

- 7.12	00-09		Tietokantaobjektirakenteen refaktorointi. Luotiin perintää ja poistettiin sitä kautta toisteisuutta. Jouduttiin korjaamaan myös muita niitä käyttäviä luokkia ja testejä. Jouduin kertaamaan paljon pythonin perinnän toimintaa jotta sain fiksun rakenteen aikaiseksi. Lopetin kun testit niin lähellä 100% coverage kun mahdollista ja pylint mahd lähellä 10pistettä. Opin paljon tänään.
	15:30-00	Klikkien ohjelmalogiikan jatkamista. Tee Clique ja CliqueRepository oliot. Liitä Clique ja CliqueDbao oliot yhteen CliqueRepository ryhmällä, johon luodaan sopiva rajapinta Klikkien käyttämistä varten. Tee näihin testit kattavasti. Jouduin muokkaamaan myös muita luokkia jotta toiminta menee hyvin yhteen (esim. yhteisellä Helper luokalla)
yht: 17h 30min
kum: 151h 45min

- 9.12	19-01		Graafisen käyttöliittymän moduulirakenteen refaktorointi ja "circular import" ongelman ratkaisu. Tuloksena omiin moduuleihin jaettu graafisen käyttöliittymän koodi.
yht: 6h
kum: 157h 45min

- 10.12 12-14:30	"user_main_page" käyttäjän pääsivun tiedoston koodailun aloitus ja tkinteriin tutustuminen, sillä käsitteissä on selvästi vielä reikiä.
	22-7		tkinterin kertausta, käyttöliittymän rakenteen suunnittelua. Lisättiin sivu "create_clique" jossa käyttäjä voi luoda uuden ryhmän. Tämä tarvitsi uutta toimintoa sovelluslogiikalta, toteutettiin se, sille kattavat testit, coverage 100%, lint lähelle 10p
yht: 11h 30min
kum: 169h 15min

- 12.12	21-06:30	Dokumentaation kirimistä. Löysin vasta Labtoolin kommentointi osuuden ja huomasin mitä kaikkea minulta on jäänyt tekemättä. Ajattelin kiriä vähän jääneitä tehtäviä. Samalla jouduin vähän miettiä ohjelman rakennetta ja toiminnallisuutta loppuun asti, sillä yritin tehdä erilaiset kaaviot niin lopullisiksi kuin mahdollista.
9h 30min
kum: 178h 45min

- 13.12 21-02:30	Docstringien teko tähänastisen pisteeseen asti koodia samalla läpikäyden
5h 30min
kum: 184h 15min

- 14.12 11-00:00	Käyttöliittymäkoodin jatkaminen ja refaktorointi. UserMainPage toiminnallisuuden luominen. Sijoittelun kanssa painiminen Näyttää jo ihan hyvältä vaikka toiminnallisuus on melko vajaat avielä.
13h
kum: 197h 15min

- 20.12	18-00		Aloita käyttäjien lisäys toiminnon suunnittelu ja kirjoittaminen
6h
kum: 203h 15min

- 21.12	21-04:45	Viimeistele käyttäjien lisäys. Tajua että olet tehnyt suuren ajatteluvirheen heti alussa ja aloita suuri refaktorointiprojekti. Haluan siirtää kaiken tarpeettoman logiikan pois käyttöliittymän puolelta, ja toteuttaa ohjelmalogiikan abstraktiotasot niin, että joka tasolla käsitellään mahdollisimman paljon sille tasolle ominaisia objekteja eikä konkreettisia literaaleja. Refaktoroi käyttäjien lisäys käyttöliittymätasolta tietokantatasolle asti. (register_page, user_service, user_repository, user_dbao, user)
7h 45min
kum: 211h

- 22.12	22-02		Siirrä käyttäjän tietojen oikeellisuuden tarkistutoiminnallisuus User-luokalle. Laita muut luokat käyttämään tätä. Poista tämän johdosta jääneet tarpeettomat riippivuudet luokan importeista.
4h
kum: 215h

- 24.12	02:30-07	Käyttäjän tietojen tarkistusmekanismin muuttaminen uudestaan. Muutos muotoon jossa virheet ilmoitetaan virheilmoituksilla, jotka kuplivat ylös käyttöliittymään asti jossa ne piirretään käyttäjälle näkyviin. Muokkaa luokat käyttämään tätä. Yritä korjata kaikki virheet testeissä. En päässyt loppuun asti kun joku sitkeä ongelma jäi.
4h 30min
kum: 219h 30min

- 26.12	06-10		Sain ratkaistua ongelman testeissä. Johtui tuplejen muuttumattomuudesta. Testien korjailua
4h

- 27.12	14-15		Clique luokkien korjailua käyttämään suoraan objekteja literaalien sijaan.
1h

- 29.12	07-9		Lisää refaktorointia. Käytän liian monessa paikassa literaaliarvoja. muutan luokat keskustelemaan objekteilla sen sijaan. Testien korjailua sitä mukaa.
2h

- 2.1	05-07		Testien korjailua.
2h

- 3.1	02-03:30	Tajusin, että mun koko oliorakenne on aivan päin helvettiä ja lopetin refaktoroinnin.. En oikeen tiedä minne tästä pitäisi jatkaa.. Haluisin että välitason luokat keskustelisivat mahd paljon olioilla, mutta huomaan, että luokkien puurakenne estää tämän rikkomatta poikkireferointia haarojen välillä. Puurakenteessa olisi tullut olla yksittäinen ohjelmalogiikasta vastaava luokka, joka omistaa ja koordinoi käyttäjiä ja klikkejä, ja sitä kautta voi antaa viestintää näiden välille. Voisin esimerkiksi yhdistää service luokat, mutta se vaatisi todella perusteellista refaktorointia ja joutuisin kirjoittamaan testit service tasolle kokonaan uudestaan. En oikeen tiedä mitä tehdä.. ahdistaa.. miksei tällaisia asioita käyty läpi ennen kuin alettiin kirjoittamaan ohjelmaa? Eikö nämä olisi aika tärkeitä asioita tiedostaa jo ennen aloittamista? Mikä on järkevä ohjelmarakenne, miten osat keskustelevat keskenään, mikä on fiksua, mikä on tyhmää. Nyt tein jotain tyhmää, ja tuntuu että sen olisi voinut helposti estää..
	16-19		Kai se on pakko refaktoroida lisää.. En halua takaisin keskustelemaan id:llä tms. joten yhdistän service luokat yhdeksi application-luokaksi, joka saa toimia pää sovelluslogiikka luokkana. Tämä luokka tulee koordinoimaan repository luokkia.
	20-02		Refaktoroinnin jatkamista
10h 30min

- 4.1	12-18		Refaktorointia
	20-04:30	Refaktorointia ja sen vaatimaa uutta toiminnallisuutta käyttäjän omien klikkien hakemiseen ja säilyttämiseen.
12h 30min

- 6.1	00-06:30	Refaktoroinnin jatkamista
	15-17		Refaktoroinnin jatkamista ja testien korjaamista
	18-22:30	testien korjaamista
	23:30-00	testien korjaamista
13h 30min

- 7.1	00-05		testien korjaamista. Kaikki alatason toimintojen testit ovat lähellä 100% coveragea ja toimivat nyt. Seuraavaksi yhdistettyjen service luokkien metodien testien kimppuun
5h

-8.1	23-03		Yhdistä service luokkien testit coWallet_application_test tiedostoon ja täydennä lähelle 100% coverage. Korjaile pikkuvirheitä coWalletaApplication luokassa
4h

- 10.1	22-05		Liitä käyttöliittymä uuteen ohjelmalogiikkaluokkaan. Ala luomaan Clique_page:a niin, että dynaamisesti aukeaa se klikki jota on klikattu. Tarvitsi pikku refaktorointia
7h

- 11.1	20-05		Refaktoroi user_main_page:a niin, että se päivittyy aina tarpeen mukaan. Alustaa klikkilistan kun käyttäjä kirjautuu, hakee uudet klikit (muttei päivitä jo olevia) oletuksena, mutta unohtaa vanhat ja hakee uudet tiedot tietokannasta jos näin tarvitsee tehdä. Oli jotenkin prkleen vaikeeta. Helvetin tkinter. En tuu kyllä ikinä saamaan tätä varmaan valmiiksi...
9h

- 12.1	18-08		Korona iski ni tehään ny koko päivä sitten. Tee clique_page, eli klikin oma näkymä. Ei vielä näytä kun dummy-summia, mutta layout ja nappien sekä entryjen kutsut ja validoinnit kyllä on paikallaan. Pientä viilausta vielä. Toimii kuitenkin jo.
14h